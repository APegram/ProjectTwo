INSERT INTO user_Table (name, admin, password) VALUES ("Bob", false, "hello");
INSERT INTO user_Table (name, admin, password) VALUES ("Jeff", true, "hello");
INSERT INTO user_Table (name, admin, password) VALUES ("Pawel", false, "hello");
INSERT INTO user_Table (name, admin, password) VALUES ("Doyle", true, "hello");
INSERT INTO user_Table (name, admin, password) VALUES ("Matt", true, "hello");
INSERT INTO user_Table (name, admin, password) VALUES ("Morgan", true, "hello");
INSERT INTO user_Table (name, admin, password) VALUES ("Stewart", false, "hello");
INSERT INTO user_Table (name, admin, password) VALUES ("Stephan", false, "hello");
INSERT INTO user_Table (name, admin, password) VALUES ("Adam", false, "hello");
INSERT INTO user_Table (name, admin, password) VALUES ("Blaise", false, "hello");

--sequelize module seeds
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`) VALUES ('1', 'Chirpy', 'exercise one', '5:00', ' * Using the app skeleton provided to you:', '* Create a MySQL database named `\'chirpy\'` with a `\'chirps\'` table to hold your data.', '* Your `\'chirp\'` table should include a field for id, author, chirp, and time created.', '* Modify the connection.js file to create a connection to your database.', '* Modify the api-routes.js file so that there is a route for adding a new chirp, as well as retrieving all chirps.', '* Modify the chirps.js file so that the page interacts with the database.');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`, `Step_7`, `Step_8`, `Step_9`) VALUES ('2', 'Sequelize', 'exercise two', '15:00', '* Spend the next few minutes with your partner answering the following questions. You should be using the Sequelize Documentation (and whatever other references you find online).', ' Question: What is Sequelize?', 'Question: What advantages does it offer?', ' Question: How do I install it? How do I incorporate it into my app?', '* Question: What the heck is a Sequelize model? What role will it play?', ' * Question: How would I model a table in Sequelize?', ' Question: How would I query for all the records where the Independence Year was less than 50 years ago?', 'How would I query the table, order it by descending Independence Years, and limit the results to just show 2 of the records.', ' * Bonus: How do I use sequelize to make changes to an existing table with data in it?');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`) VALUES ('3', 'Chirpy-Sequelize', 'exercise three', '5:00', 'run server.js');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`) VALUES ('4', 'StarWars', 'exercise four', '5:00', '* Install the sequelize and mysql2 npm packages.', '* Delete the orm from config. In your app folder, create a model folder with a character.js file in the model\n', '* In character.js, model out the character table, as detailed in the schema.sql file located in the root of this project directory.\n', '* Remove all references to the old orm file and replace it with character.js\n', '* Use Sequelize methods in place of the orm calls to retrieve and insert data.\n', '* Update connection.js to use sequelize instead of the mysql package.\n');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`) VALUES ('5', 'sequelizeLibrary', 'exercise five', '10:00', '* Create a `\'sequelize_library\'` DB.', '* Modify `\'connection.js\'` to include your MySQL user/database information.', '* In the `\'models\'` folder, modify the `book.js` file to create a book model. Further details can be found inside this file.', ' * Your book model must include a title, author, genre, page numbers.', '* Modify `\'api-routes.js\'` using sequelize query methods to create the required routes.', ' * Modify `\'html-routes.js\'` to deliver the required html files.');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`) VALUES ('6', 'sequelizeCLI', 'exercise six', '5:00', '*Teacher will go over this. ');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`, `Step_7`, `Step_8`, `Step_9`, `Step_10`) VALUES ('7', 'Orm to Sequelize', 'exercise seven', '20:00', '1) Create a new local MYSQL database called \'todolist\', but don\'t create any tables.', '  2) Delete any references to the orm.js file inside the `api-routes.js` file.\n', '  3) Delete the config folder.', '4) While inside the activity folder, run npm install in terminal.', '5) In terminal, type in the following command: \"sequelize init:models & sequelize init:config\"', '6) Step 5 should have created a config and a models folder for us. Navigate to the config folder, open `config.json`, and modify the development object\'s \"database\",\"username\" and \"password\" values to match your MYSQL database on your machine. Include the database port number, if not using the default.', '7) Navigate to the models folder and create a new file called `todo.js`. Create a Todo model with columns for \"text\" (DataTypes.STRING), and \"complete\" (DataTypes.BOOLEAN).', ' 8) Navigate to the server.js file and require all of our models by requiring the models folder. Save this to a variable and name it \"db\".', '9) Sync the models by running db.sequelize.sync() before we start the express server.', '10) In your terminal, run \"node server\". Check MYSQL Workbench to see if a Todos table was created. If so, you were successful. If not, check your terminal for any errors.');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`, `Step_7`) VALUES ('8', 'Sequelize-Create-Read', 'exercise eight', '20:00', ' 1) Open the folder and run `npm install`.', ' 2) Update the `config.json` file\'s development object with your own local MYSQL database settings.', ' 3) Navigate to the `api-routes.js` folder.', '4) Add a Sequelize findAll method inside the GET route which finds all of the todos and returns them to the user as JSON.', '5) Add a Sequelize create method to the POST route to save a new todo to the database using the data sent to the server in req.body.', '  6) To test if this worked, open your terminal and run `node server` and navigate to localhost:8080. If you are able to save new todos, you were successful.', ' 7) Hint: We can access the Todo model here with \"db.Todo\"');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`, `Step_7`, `Step_8`, `Step_9`) VALUES ('9', 'Sequelize Update-Delete', 'exercise nine', '15:00', '1) Open the Unsolved folder', '  2) Run `npm install`', '  3) Update the `config.json` file\'s development object with your own local MYSQL database settings.', '  4) Inside the `api-routes.js` file, look for the DELETE route and add a Sequelize method to delete the todo with the id available to us in `req.params.id`.', ' 5) Inside of the same file, look for the PUT route and add a Sequelize method to update a todo with the new todo data available to us inside req.body.', '6) Again, you won\'t need to touch the front end HTML or JavaScript to make any of this work.', '  7) **HINT**: you will need to pass in an options object with a \"where\" attribute into both methods in order to filter these queries to target the Todos we want to update or delete.', ' 8) Navigate to localhost:8080. If you can update and delete todos without errors, you were successful.', '9) If you get stuck or finish early, discuss the documentation for the `update` and `destroy` methods with your partner ');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`, `Step_7`, `Step_8`) VALUES ('10', 'sequelize validations', 'exercise ten', '15:00', '1) Open the folder sent out to you.', '2) Run `npm install`.', '3) Update the `config.json` file\'s development object with your own local MYSQL database settings.', ' 4) Modify the `todo.js` file so that the Todo model has a flag to prevent the text field from being null. Also add a validation to make sure the text field is at least one character, but no more than 140 characters.', ' 5) Modify the complete field in our Todo model so that it supplies a default value of false if one is not supplied during Todo creation.', ' 6) Once a Sequelize model has been created and synced for the first time, any changes we make to our Todo model won\'t be picked up by our database. The easiest way to get around this during the development process is to pass \"{ force: true }\" as an argument into our sync method inside `server.js` file. This will make it so that every time we run our app, our Todos table will be dropped and recreated with the new configuration. ', '7) Navigate to localhost:8080 to test that this worked. Try to save a Todo without any text in it, and then try and save a Todo with over 140 characters. If these didn\'t save and you see errors in your console that have to do with validation, you were successful.', ' 8) **Big Hint**: Sequelize documentation on validations with examples can be found here: <http://docs.sequelizejs.com/en/latest/docs/models-definition/#validations>');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`) VALUES ('11', 'Post-Model', 'exercise eleven', '15:00', '  1) Open the folder slacked out to you, run `npm install`', '  2) Create a new MySQL database and name it `blogger`. Don\'t create any tables.', ' 3) Open the `config` folder and update the `config.json` file\'s `development` object to match your own local MySQL database.', '4) Go to the `models` folder and open the `post.js` file.', ' 5) Create a Sequelize `Post` model here. The model should have a title property of type DataTypes.STRING, a body property of DataTypes.TEXT, and a category property of DataTypes.STRING. \n  (<http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types>)', '6) To check if this worked, run `node server.js` in your terminal. Then open MySQL Workbench to check if a Posts table has been created.');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`) VALUES ('12', 'Blog CRUD', 'exercise twelve', '15:00', '  1) Open the folder sent out to you, run `npm install`', '2) Open the `config` folder and update the `config.json` file\'s `development` object to match your own local MySQL database.', '3) Navigate to the `api-routes.js` file inside of the `routes` folder.', '  4) Fill in each route with the code described in the comments to add each CRUD action.\n');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`, `Step_7`, `Step_8`) VALUES ('13', 'Post-Author-Association', 'exercise thirteen', '10:00', '1) Open the folder sent out to you.', '  2) Run `npm install`', '  3) Open the `config` folder and update the `config.json` file\'s `development` object to match your own local MySQL database.', '  4) Navigate to the `post.js` file.', '  5) You will need to set an `associate` property to the `Post` model after it\'s defined. There\'s an example of this type of association being done here: ', '<https://github.com/sequelize/express-example/blob/master/models/task.js>', '* This may take a few tries to implement correctly in your own Post model (There\'s a lot of curly braces there!). You can verify your code works by starting your node server and then checking MySQL Workbench. If the Posts table now has a foreign key of AuthorId, you were successful.', '**Bonus**: If you complete the exercise before time\'s up, navigate to the author.js file and add a **hasMany** association from the Author model to the Post Model.');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`, `Step_7`, `Step_8`) VALUES ('14', 'Post-Author-Joins', 'exercise fourteen', '15:00', '1) Open the folder sent out to you', '2) Run `npm install`', '3) Open the `config` folder and update the `config.json` file\'s `development` object to match your own local MySQL database.', ' 4) Navigate to the `post-api-routes.js` file.', ' 5) Add the \"include\" option to the queries specified in the comments. This is a feature called \"eager loading\". We want to \"include\" the Author model.', '  6) Navigate to the `author-api-routes.js` file and add the \"include\" option to the queries specified in the comments. Here we want to \"include\" the Post model.', '  7) If successful the application should now be fully functional. After you create a few Authors with a few posts, try navigating to either `localhost:8080/api/posts` or `localhost:8080/api/authors` to make sure the JSON returned for both routes includes all of the data.', '  **Hint**: The \"include\" key goes on the same options object as the \"where\" attribute we\'ve been using. Examples can be found at the link supplied.');