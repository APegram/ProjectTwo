INSERT INTO userTable (admin, name, userName, email, password, theme) VALUES (false, "Bob", "mynameisbob", "bob@gmail.com", "hello", "Black");
INSERT INTO userTable (admin, name, userName, email, password, theme) VALUES (true, "Jeff", "mynameisjeff", "jeff@gmail.com", "hello", "Black");
INSERT INTO userTable (admin, name, userName, email, password, theme) VALUES (false, "Pawel", "mynameispawel", "pawel@gmail.com", "hello", "Black");
INSERT INTO userTable (admin, name, userName, email, password, theme) VALUES (true, "Doyle", "mynameisdoyle", "doyle@gmail.com", "hello", "Black");
INSERT INTO userTable (admin, name, userName, email, password, theme) VALUES (true, "Matt", "mynameismatt", "matt@gmail.com", "hello", "Black");
INSERT INTO userTable (admin, name, userName, email, password, theme) VALUES (true, "Morgan", "mynameismorgan", "morgan@gmail.com", "hello", "Black");
INSERT INTO userTable (admin, name, userName, email, password, theme) VALUES (false, "Stewart", "mynameisstewart", "stewar@gmail.com", "hello", "Black");
INSERT INTO userTable (admin, name, userName, email, password, theme) VALUES (false, "Stephen", "mynameisstephen", "stephen@gmail.com", "hello", "Black");
INSERT INTO userTable (admin, name, userName, email, password, theme) VALUES (false, "Adam", "mynameisadam", "adam@gmail.com", "hello", "Black");
INSERT INTO userTable (admin, name, userName, email, password, theme) VALUES (false, "Blaise", "mynameisblaise", "blaise@gmail.com", "hello", "Black");


INSERT INTO comments (text, name, stepNum) VALUES ("Help me TAs! I'm no where close to Blaise!", "Stephen", ;
INSERT INTO comments (text, name, stepNum) VALUES ("Help me TAs! I wish I was as good as Blaise!", "Stewart", 0);

INSERT INTO moduleIndex (moduleName, moduleTableName, moduleJSName) VALUES ('01-HTML-Git-CSS', "module1", "module1.js");
INSERT INTO moduleIndex (moduleName, moduleTableName, moduleJSName) VALUES ('02-CSS-Bootstrap', "module2", "module2.js");
INSERT INTO moduleIndex (moduleName, moduleTableName, moduleJSName) VALUES ('03-Javascript', "module3", "module3.js");
INSERT INTO moduleIndex (moduleName, moduleTableName, moduleJSName) VALUES ('04-jQuery', "module4", "module4.js");
INSERT INTO moduleIndex (moduleName, moduleTableName, moduleJSName) VALUES ('05-Timers', "module5", "module5.js");
INSERT INTO moduleIndex (moduleName, moduleTableName, moduleJSName) VALUES ('06-AJAX', "module6", "module6.js");
INSERT INTO moduleIndex (moduleName, moduleTableName, moduleJSName) VALUES ('07-Firebase', "module7", "module7.js");
INSERT INTO moduleIndex (moduleName, moduleTableName, moduleJSName) VALUES ('08-Project-One', "module8", "module8.js");
INSERT INTO moduleIndex (moduleName, moduleTableName, moduleJSName) VALUES ('09-Portfolio-updates', "module9", "module9.js");
INSERT INTO moduleIndex (moduleName, moduleTableName, moduleJSName) VALUES ('10-Node.js', "module10", "module10.js");
INSERT INTO moduleIndex (moduleName, moduleTableName, moduleJSName) VALUES ('11-JS-Constructors', "module11", "module11.js");
INSERT INTO moduleIndex (moduleName, moduleTableName, moduleJSName) VALUES ('12-MySQL', "module12", "module12.js");
INSERT INTO moduleIndex (moduleName, moduleTableName, moduleJSName) VALUES ('13-Express', "module13", "module13.js");
INSERT INTO moduleIndex (moduleName, moduleTableName, moduleJSName) VALUES ('14-Handlebars', "module14", "module14.js");
INSERT INTO moduleIndex (moduleName, moduleTableName, moduleJSName) VALUES ('15-Sequelize', "module15", "module15.js");



--sequelize module seeds
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`) VALUES ('1', 'Chirpy', 'exercise one', '5:00', ' Using the app skeleton provided to you:', ' Create a MySQL database named `\'chirpy\'` with a `\'chirps\'` table to hold your data.', ' Your `\'chirp\'` table should include a field for id, author, chirp, and time created.', ' Modify the connection.js file to create a connection to your database.', ' Modify the api-routes.js file so that there is a route for adding a new chirp, as well as retrieving all chirps.', ' Modify the chirps.js file so that the page interacts with the database.');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`, `Step_7`, `Step_8`, `Step_9`) VALUES ('2', 'Sequelize', 'exercise two', '15:00', ' Spend the next few minutes with your partner answering the following questions. You should be using the Sequelize Documentation (and whatever other references you find online).', ' Question: What is Sequelize?', 'Question: What advantages does it offer?', ' Question: How do I install it? How do I incorporate it into my app?', ' Question: What the heck is a Sequelize model? What role will it play?', '  Question: How would I model a table in Sequelize?', ' Question: How would I query for all the records where the Independence Year was less than 50 years ago?', 'How would I query the table, order it by descending Independence Years, and limit the results to just show 2 of the records.', '  Bonus: How do I use sequelize to make changes to an existing table with data in it?');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`) VALUES ('3', 'Chirpy-Sequelize', 'exercise three', '5:00', 'run server.js');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`) VALUES ('4', 'StarWars', 'exercise four', '5:00', ' Install the sequelize and mysql2 npm packages.', ' Delete the orm from config. In your app folder, create a model folder with a character.js file in the model\n', ' In character.js, model out the character table, as detailed in the schema.sql file located in the root of this project directory.\n', ' Remove all references to the old orm file and replace it with character.js\n', ' Use Sequelize methods in place of the orm calls to retrieve and insert data.\n', ' Update connection.js to use sequelize instead of the mysql package.\n');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`) VALUES ('5', 'sequelizeLibrary', 'exercise five', '10:00', ' Create a `"sequelize_library"` DB.', ' Modify `\'connection.js\'` to include your MySQL user/database information.', ' In the `\'models\'` folder, modify the `book.js` file to create a book model. Further details can be found inside this file.', '  Your book model must include a title, author, genre, page numbers.', ' Modify `\'api-routes.js\'` using sequelize query methods to create the required routes.', '  Modify `\'html-routes.js\'` to deliver the required html files.');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`) VALUES ('6', 'sequelizeCLI', 'exercise six', '5:00', 'Teacher will go over this. ');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`, `Step_7`, `Step_8`, `Step_9`, `Step_10`) VALUES ('7', 'Orm to Sequelize', 'exercise seven', '20:00', ' Create a new local MYSQL database called \'todolist\', but don\'t create any tables.', '   Delete any references to the orm.js file inside the `api-routes.js` file.\n', '   Delete the config folder.', ' While inside the activity folder, run npm install in terminal.', ' In terminal, type in the following command: \"sequelize init:models & sequelize init:config\"', ' Step 5 should have created a config and a models folder for us. Navigate to the config folder, open `config.json`, and modify the development object\'s \"database\",\"username\" and \"password\" values to match your MYSQL database on your machine. Include the database port number, if not using the default.', ' Navigate to the models folder and create a new file called `todo.js`. Create a Todo model with columns for \"text\" (DataTypes.STRING), and \"complete\" (DataTypes.BOOLEAN).', '  Navigate to the server.js file and require all of our models by requiring the models folder. Save this to a variable and name it \"db\".', ' Sync the models by running db.sequelize.sync() before we start the express server.', ' In your terminal, run \"node server\". Check MYSQL Workbench to see if a Todos table was created. If so, you were successful. If not, check your terminal for any errors.');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`, `Step_7`) VALUES ('8', 'Sequelize-Create-Read', 'exercise eight', '20:00', '  Open the folder and run `npm install`.', '  Update the `config.json` file\'s development object with your own local MYSQL database settings.', '  Navigate to the `api-routes.js` folder.', ' Add a Sequelize findAll method inside the GET route which finds all of the todos and returns them to the user as JSON.', ' Add a Sequelize create method to the POST route to save a new todo to the database using the data sent to the server in req.body.', '   To test if this worked, open your terminal and run `node server` and navigate to localhost:8080. If you are able to save new todos, you were successful.', '  Hint: We can access the Todo model here with \"db.Todo\"');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`, `Step_7`, `Step_8`, `Step_9`) VALUES ('9', 'Sequelize Update-Delete', 'exercise nine', '15:00', ' Open the Unsolved folder', '   Run `npm install`', '   Update the `config.json` file\'s development object with your own local MYSQL database settings.', '   Inside the `api-routes.js` file, look for the DELETE route and add a Sequelize method to delete the todo with the id available to us in `req.params.id`.', '  Inside of the same file, look for the PUT route and add a Sequelize method to update a todo with the new todo data available to us inside req.body.', ' Again, you won\'t need to touch the front end HTML or JavaScript to make any of this work.', '   HINT: you will need to pass in an options object with a \"where\" attribute into both methods in order to filter these queries to target the Todos we want to update or delete.', '  Navigate to localhost:8080. If you can update and delete todos without errors, you were successful.', ' If you get stuck or finish early, discuss the documentation for the `update` and `destroy` methods with your partner ');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`, `Step_7`, `Step_8`) VALUES ('10', 'sequelize validations', 'exercise ten', '15:00', ' Open the folder sent out to you.', ' Run `npm install`.', ' Update the `config.json` file\'s development object with your own local MYSQL database settings.', '  Modify the `todo.js` file so that the Todo model has a flag to prevent the text field from being null. Also add a validation to make sure the text field is at least one character, but no more than 140 characters.', '  Modify the complete field in our Todo model so that it supplies a default value of false if one is not supplied during Todo creation.', '  Once a Sequelize model has been created and synced for the first time, any changes we make to our Todo model won\'t be picked up by our database. The easiest way to get around this during the development process is to pass \"{ force: true }\" as an argument into our sync method inside `server.js` file. This will make it so that every time we run our app, our Todos table will be dropped and recreated with the new configuration. ', ' Navigate to localhost:8080 to test that this worked. Try to save a Todo without any text in it, and then try and save a Todo with over 140 characters. If these didn\'t save and you see errors in your console that have to do with validation, you were successful.', '  Big Hint: Sequelize documentation on validations with examples can be found here: <http://docs.sequelizejs.com/en/latest/docs/models-definition/#validations>');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`) VALUES ('11', 'Post-Model', 'exercise eleven', '15:00', '   Open the folder slacked out to you, run `npm install`', '   Create a new MySQL database and name it `blogger`. Don\'t create any tables.', '  Open the `config` folder and update the `config.json` file\'s `development` object to match your own local MySQL database.', ' Go to the `models` folder and open the `post.js` file.', '  Create a Sequelize `Post` model here. The model should have a title property of type DataTypes.STRING, a body property of DataTypes.TEXT, and a category property of DataTypes.STRING. \n  (<http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types>)', ' To check if this worked, run `node server.js` in your terminal. Then open MySQL Workbench to check if a Posts table has been created.');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`) VALUES ('12', 'Blog CRUD', 'exercise twelve', '15:00', '   Open the folder sent out to you, run `npm install`', ' Open the `config` folder and update the `config.json` file\'s `development` object to match your own local MySQL database.', ' Navigate to the `api-routes.js` file inside of the `routes` folder.', '   Fill in each route with the code described in the comments to add each CRUD action.\n');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`, `Step_7`, `Step_8`) VALUES ('13', 'Post-Author-Association', 'exercise thirteen', '10:00', ' Open the folder sent out to you.', '   Run `npm install`', '   Open the `config` folder and update the `config.json` file\'s `development` object to match your own local MySQL database.', '   Navigate to the `post.js` file.', '   You will need to set an `associate` property to the `Post` model after it\'s defined. There\'s an example of this type of association being done here: ', '<https://github.com/sequelize/express-example/blob/master/models/task.js>', ' This may take a few tries to implement correctly in your own Post model (There\'s a lot of curly braces there!). You can verify your code works by starting your node server and then checking MySQL Workbench. If the Posts table now has a foreign key of AuthorId, you were successful.', 'Bonus: If you complete the exercise before time\'s up, navigate to the author.js file and add a hasMany association from the Author model to the Post Model.');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`, `Step_7`, `Step_8`) VALUES ('14', 'Post-Author-Joins', 'exercise fourteen', '15:00', ' Open the folder sent out to you', ' Run `npm install`', ' Open the `config` folder and update the `config.json` file\'s `development` object to match your own local MySQL database.', '  Navigate to the `post-api-routes.js` file.', '  Add the \"include\" option to the queries specified in the comments. This is a feature called \"eager loading\". We want to \"include\" the Author model.', '   Navigate to the `author-api-routes.js` file and add the \"include\" option to the queries specified in the comments. Here we want to \"include\" the Post model.', '   If successful the application should now be fully functional. After you create a few Authors with a few posts, try navigating to either `localhost:8080/api/posts` or `localhost:8080/api/authors` to make sure the JSON returned for both routes includes all of the data.', '  Hint: The \"include\" key goes on the same options object as the \"where\" attribute we\'ve been using. Examples can be found at the link supplied.');

--module 14
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`) VALUES ('1', 'Express Calculator', 'exercise 1', '15:00', ' You will create an Express calculator application with one get route that is able to take in three parameters: an operation and two numbers.', ' There are four operation values which a user may use: addition, subtraction, multiplication, and division.', ' When the route is hit, your browser should display the result of the math operation.', ' For example, when the user goes to the url <http://localhost:3000/add/10/1>, the page should display 11.');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `Step_1`) VALUES ('2', 'Magic Schools', 'exercise 2', 'No ReadMe');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`, `Step_7`) VALUES ('3', 'Seinfeld app', 'exercise 3', '20:00', '   Create a seinfeld_db database with an actors table.', '     The actors table will have a column for id (PRIMARY KEY AUTO_INCREMENT int), name (varchar), coolness_points (int), and attitude (varchar).', '   Add in four actors with different names, coolness_points, and attitudes.', '   Create a Node Application with Express and MySQL with three Express routes.', '     Create a `/cast` route that will display all the actors and their data ordered by their id\'s.', '     Create a `/coolness-chart` route that will display all the actors and their data ordered by their coolness points.', '     Create a `/attitude-chart/:att` route that will display all the actors for a specific type of attitude.');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `Step_1`) VALUES ('4', 'Handlebars Lunch', 'exercise 4', 'No Readme');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`) VALUES ('5', 'Ben and Jerrys', 'exercise 5', '15:00', '   In this activity, you are going to be creating your own Ben and Jerry\'s App where users can see all of the different flavors Ben and Jerry\'s have to offer while also getting specific information on a flavor by searching for it within the URL.', '   Do not use MySQL for this assignment! Use the `icecreams` variable above as your data. Add the variable to your `server.js` file.', '   Using handlebars and express, create a route called `/icecream/:name`. When the route is hit, it will display the name, price and awesomeness for that specific ice cream.', '   Create an `/icecreams` route. It will loop over all the ice creams and display them all to the user.', ' var icecreams = [\n      {name: \'vanilla\', price: 10, awesomeness: 3},\n      {name: \'chocolate\', price: 4, awesomeness: 8},\n      {name: \'banana\', price: 1, awesomeness: 1},\n      {name: \'greentea\', price: 5, awesomeness: 7},\n      {name: \'jawbreakers\', price: 6, awesomeness: 2},\n    ];');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`) VALUES ('6', 'Handlebar Animals', 'exercise 6', '5:00', '   You will edit the `server.js` file, the `dog.handlebars` file, and the `index.handlebars` file in an attempt to recreate the application that we demonstrated just a couple of minutes ago. Instructions on what to do are contained within each file you will have to edit.', '   You won\'t be using MySQL for this exercise but will instead be using the animals array in the `server.js` file.');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `Step_1`) VALUES ('7', 'Tasksaver', 'exercise 7', 'No Readme');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`, `Step_7`, `Step_8`, `Step_9`) VALUES ('8', 'wishes', 'exercise 8', '30:00', '   Create an app with Express, MySQL and Handlebars.', '     HINT: this app will be very similar to the app your instructor just demonstrated and slacked out. Please feel free to leverage that code when creating this code.', '   Create a `schema.sql` file and create the following inside of that file:', '    1. Make a database called \"wishes_db\"', '    2. Inside of that database, make a table called \"wishes\" which will have a wish column and an id column. The id will be automatically incremented while also being the primary key.', '    3. Run your `schema.sql` file within MySQL Workbench before moving onto the next steps.', '   In your `server.js` file, you will have to create two routes: a get route for `\'/\'` and a post route for `\'/\'`.', '     Render all of the wishes from the wishes table when the `\'/\'` get route is hit. Additionally show the form that the user can use to create a new wish. The form will POST to the `\'/\'` route.', '     The `\'/\'` post route will insert the wish from the form into the wishes table and will redirect the user back to the `\'/\'` get route.');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `Step_1`) VALUES ('9', 'dayplanner', 'exercise 9', 'No Readme');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`, `Step_7`, `Step_8`, `Step_9`) VALUES ('10', 'watchlist', 'exercise 10', '20:00', '    1. Make a database called moviePlannerDB', '    2. Inside of that database make a movies table which will contain a movie column and an id column. The id will be automatically incremented while also being the primary key.', '    3. Run your `schema.sql` file within MySQL Workbench before moving onto the next steps.', '   In your server.js file, you will create four routes: `get`, `post`, `put`, and `delete`.', '     Render the main `index.handlebars` when the `\'/\'` get route is hit with all of the movies from the movies table.', '     Your application should have a set of routes on `\'/api/movies\'` for create, update, and delete operations on the movies table.', '     Show a delete button next to each movie. When one of the delete buttons is clicked, the code should send a DELETE request to  delete the associated movie from your database.', '     Additionally, show the form that the user can use to add a movie to be watched.  When the submit button is clicked, the code will post to the `\'/movies\'` route, which will insert the movie from the form into the movies table and return the ID of the new movie.', '     Have another form that will update a movie in the movies table. The form will include two inputs: an id input and a movie title input. Remember to leverage a PUT method.');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`) VALUES ('11', 'quotesapp', 'exercise 11', '15:00', '   Using Express, MySQL, Handlebars, and the starter code as a jumping-off point, you will be creating a simple web application which allows users to create, read, update, and delete popular quotes.', '   Your application will have two pages:', '     One will show all of the quotes within a database and will allow users to create a new quote or delete an existing one. A button next to each, labeled \"Update This Quote,\" will take users to the other page which shows the quote selected and will allow them to update it with new information.', '   Make sure to run the code contained within the `schema.sql` and `seeds.sql` files beforehand so that you have a database with which to work.');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `Step_1`) VALUES ('12', 'ORM example', 'exercise 12', 'No Readme');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`) VALUES ('13', 'Party_DB', 'exercise 13', '15:00', ' Create a Node MySQL application with an ORM that executes once the server is launched.', ' You will not need Express or Handlebars for this assignment. Use `console.log` to print the data collected to the console.', ' Create a MySQL database with the tables and data which were slacked out to you.', ' Create a Node app and connect it to MySQL with a `config` folder and with a `connection.js` file inside of that folder.', ' Create an `orm.js` file, and make an ORM that will do the following:', 'Console log all the party names.\n   Console log all the client names.\n   Console log all the parties that have a party-type of grown-up.\n   Console log all the clients and their parties.');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `Step_1`) VALUES ('14', 'The Asynch Problem', 'exercise 14', 'No Readme');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`) VALUES ('15', 'The Asynch Solution', 'exercise 15', '15:00', ' Work in pairs to see if you can come up with the reason why our code in `18-TheAsynchProblem` is console.logging \"undefined\" despite no errors being recorded.', ' See if you can come up with a possible solution to this problem.', '   You are free to search the web for potential causes/solutions to this issue, as it is a problem that many new coders have faced and that they will continue to face for years and years to come.', '   Use the code contained within `18-TheAsynchProblem` to run, test, and mess with on your own.');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `Step_1`) VALUES ('16', 'Callback review', 'exercise 16', 'No Readme');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `Step_1`) VALUES ('17', 'MVC example', 'exercise 17', 'No Readme');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`) VALUES ('18', 'Cats App', 'exercise 18', '30:00', '   Add a delete button into the `index.handlebars` file next to each cat.', '   Add on to the following:', '   The `cats.js` file to add a jQuery event handler for the delete button.', '   The ORM to include a delete key and function', '   The cat model to include a delete key and function that uses the ORM', '   The `catsController.js` file to have a `/api/cats/:id` delete route, to call the delete key of the cat model, and to pass in arguments as necessary');
