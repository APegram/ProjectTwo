INSERT INTO userTable (admin, name, userName, email, password, theme) VALUES (false, "Bob", "mynameisbob", "bob@gmail.com", "hello", "Black");
INSERT INTO userTable (admin, name, userName, email, password, theme) VALUES (true, "Jeff", "mynameisjeff", "jeff@gmail.com", "hello", "Black");
INSERT INTO userTable (admin, name, userName, email, password, theme) VALUES (false, "Pawel", "mynameispawel", "pawel@gmail.com", "hello", "Black");
INSERT INTO userTable (admin, name, userName, email, password, theme) VALUES (true, "Doyle", "mynameisdoyle", "doyle@gmail.com", "hello", "Black");
INSERT INTO userTable (admin, name, userName, email, password, theme) VALUES (true, "Matt", "mynameismatt", "matt@gmail.com", "hello", "Black");
INSERT INTO userTable (admin, name, userName, email, password, theme) VALUES (true, "Morgan", "mynameismorgan", "morgan@gmail.com", "hello", "Black");
INSERT INTO userTable (admin, name, userName, email, password, theme) VALUES (false, "Stewart", "mynameisstewart", "stewar@gmail.com", "hello", "Black");
INSERT INTO userTable (admin, name, userName, email, password, theme) VALUES (false, "Stephen", "mynameisstephen", "stephen@gmail.com", "hello", "Black");
INSERT INTO userTable (admin, name, userName, email, password, theme) VALUES (false, "Adam", "mynameisadam", "adam@gmail.com", "hello", "Black");
INSERT INTO userTable (admin, name, userName, email, password, theme) VALUES (false, "Blaise", "mynameisblaise", "blaise@gmail.com", "hello", "Black");


INSERT INTO comments (text, name, stepNum) VALUES ("Help me TAs! I'm no where close to Blaise!", "Stephen", ;
INSERT INTO comments (text, name, stepNum) VALUES ("Help me TAs! I wish I was as good as Blaise!", "Stewart", 0);

INSERT INTO moduleIndex (moduleName, moduleTableName, moduleJSName) VALUES ('01-HTML-Git-CSS', "module1", "module1.js");
INSERT INTO moduleIndex (moduleName, moduleTableName, moduleJSName) VALUES ('02-CSS-Bootstrap', "module2", "module2.js");
INSERT INTO moduleIndex (moduleName, moduleTableName, moduleJSName) VALUES ('03-Javascript', "module3", "module3.js");
INSERT INTO moduleIndex (moduleName, moduleTableName, moduleJSName) VALUES ('04-jQuery', "module4", "module4.js");
INSERT INTO moduleIndex (moduleName, moduleTableName, moduleJSName) VALUES ('05-Timers', "module5", "module5.js");
INSERT INTO moduleIndex (moduleName, moduleTableName, moduleJSName) VALUES ('06-AJAX', "module6", "module6.js");
INSERT INTO moduleIndex (moduleName, moduleTableName, moduleJSName) VALUES ('07-Firebase', "module7", "module7.js");
INSERT INTO moduleIndex (moduleName, moduleTableName, moduleJSName) VALUES ('08-Project-One', "module8", "module8.js");
INSERT INTO moduleIndex (moduleName, moduleTableName, moduleJSName) VALUES ('09-Portfolio-updates', "module9", "module9.js");
INSERT INTO moduleIndex (moduleName, moduleTableName, moduleJSName) VALUES ('10-Node.js', "module10", "module10.js");
INSERT INTO moduleIndex (moduleName, moduleTableName, moduleJSName) VALUES ('11-JS-Constructors', "module11", "module11.js");
INSERT INTO moduleIndex (moduleName, moduleTableName, moduleJSName) VALUES ('12-MySQL', "module12", "module12.js");
INSERT INTO moduleIndex (moduleName, moduleTableName, moduleJSName) VALUES ('13-Express', "module13", "module13.js");
INSERT INTO moduleIndex (moduleName, moduleTableName, moduleJSName) VALUES ('14-Handlebars', "module14", "module14.js");
INSERT INTO moduleIndex (moduleName, moduleTableName, moduleJSName) VALUES ('15-Sequelize', "module15", "module15.js");

-- module1 seeds
INSERT INTO module1 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour', 'stepFive', 'stepSix') VALUES ('Console Commands', 'exercise one', '5:00', 'From the Terminal/Console and using only the command line, create the following:', 'A new folder with the name of "first_day_stuff"', 'A new HTML file with the name of "first-day.html"', 'Open the current folder containing the new HTML file', 'Create multiple directories/folders with the names "one_folder" and "second_folder" in one command.', 'Create multiple files witht he names "one.html" and "two.html" in one command in the "first_day_stuff" directory.');
INSERT INTO module1 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour', 'stepFive', 'stepSix') VALUES ('Intro to Console Bash', 'exercise two', '5:00', 'From the Terminal/Console, using only the command line', 'Create a new folder with the name of "self-destructing-folder"', 'Create a new txt file with the name "secret-message.txt"', 'Copy "secret-message.txt" to the inside of "self-destructing-folder".', 'Delete the original "secret-message.txt" file.', 'Delete the "self-destructing-folder".');
INSERT INTO module1 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour', 'stepFive', 'stepSix', 'stepSeven', 'stepEight', 'stepNine', 'stepTen', 'stepEleven', 'stepTwelve') VALUES ('My First HTML', 'exercise three', '5:00', 'In a new HTML file, create the basic structure of an HTML document and include the following in it:/n HINT: You should be looking up at the screen pretty often', 'DOCTYPE declaration', 'Head tag with a title tag', 'H1 tag with a title of your choice', 'Embed an image', 'Create the following three links on your page:', 'One link that is `target="_blank"` so that it opens a new tab when clicked on.','Make the second link bold.','Make the third link a placeholder so it goes nowhere.', 'Bonus: Create an ordered list of steps to make a sandwich.\n Create an unordered list of 5 bands/musicians you like.', 'Bonus: Create a table with 2 columns (animal class and animal name) and 4 rows of animals.\n Use an alternate way of separating links without line breaks.', 'Bonus: Embed a Youtube video of your favorite band/musician.');
INSERT INTO module1 ('title', 'description', 'countDown', 'stepOne') VALUES ('HTML Git', 'exercise four', '5:00', 'Create a basic HTML page with your own information that looks similar to the design shown on screen.');
INSERT INTO module1 ('title', 'description', 'countDown', 'stepOne') VALUES ('Basic Css', 'exercise five', '5:00', 'For your reference');
INSERT INTO module1 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour', 'stepFive', 'stepSix', 'stepSeven', 'stepEight', 'stepNine', 'stepTen', 'stepEleven', 'stepTwelve') VALUES ('HTML CSS Layout', 'exercise six', '5:00', 'Put all of this code inside a folder named `week1-day2-html-css`, and put the folder in a place where you normally code.', 'Use the command line to make a folder called `css`.', 'Use the command line to make a file called `style.css` inside of thee `css` folder.', 'Reference the `style.css` in your `student-bio.html` file. You do this by placing `<link rel="stylesheet" type="text/css" href="css/style.css">` inside the `<head>` tag.', 'Style the example on the projector.\n Add a `class` called "container" on the `div` tag.\n Add an `id` called "main-bio" for the first `section` tag.\n Add an `id` called "contact-info" for the second `section` tag.\n Add an `id` called "bio-image" for the bio image.', 'body \n The background color is `#efeee7`. \n The font used `"Georgia",Times New Roman,Times,serif;`.\n The font color is `#333333`. \n Be sure to zero out the body margins and padding so the page is flush to the top of the page', '`header` \n The background color is `#333333`.', '`h1` \n The font color is `#eee`. \n The font size is `28px`. \n Look at the example on the screen, and eyeball the padding and/or margins and positioning of the text.', '`h2` \n ', ' The font size is `24px`', 'Make the container have a width of 1024 pixels, and center it. You do this using `margin: 0 auto;`. \n Make `#main-bio`, `#contact-info`, `#bio-image` all `float: left`.\n Make the `#bio-image` have a width of 200 pixels. \n', 'Be sure to include `alt` text in all images \n `#main-bio` should have a width of `70%`. \n Add margins to the image so there is distance between it and the bio text.\n `#contact-info` should have a width of `30%`. \n Adjust the line height so it is 1.5 times the size of the font. \n Make the link color `#d21034`.');
INSERT INTO module1 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour', 'stepFive') VALUES ('Relative Paths Activity', 'exercise seven', '5:00', "`git clone`the whole class repo to your local machine. _This way you'll be able to simply `git pull` the class repo for new activities_.", 'Then modify each of the four `html-bio.html` pages such that they can access the CSS inside their folder. Don\'t move the CSS file, and don\'t move the HTML file.', 'Use relative linking to make it work!', 'Hint: If you need some reading material on relative linking you can use <https://css-tricks.com/quick-reminder-about-file-paths/>.', 'If you finish early, please help out those around you, or begin reading through the Learn CSS Layout Guide found here: <http://learnlayout.com/no-layout.html>');
INSERT INTO module1 ('title', 'description', 'countDown', 'stepOne') VALUES ('Float Examples', 'exercise eight', '5:00', 'Look at files provided');
INSERT INTO module1 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour', 'stepFive', 'stepSix', 'stepSeven') VALUES ('Float Layout Activity', 'exercise nine', '5:00', 'Introduce yourself to 1–2 people next to you.', 'Then using `floats.html` and `floats.css` as a starting point, work together to create the missing CSS necessary to form the layout shown to you on screen.', 'This will not be easy so work at it as best you can. This is a challenging activity. At the very least, try to increase your understanding of CSS properties.', 'Hint: Concentrate on first figuring out how to create the boxes. Think about using background colors (CSS property: `background`).', "Hint: We've provided the styling you need for the header element. Use this as a starting point to style the others.", 'Hint: You will need to apply each of the following CSS properties at least once: \n padding \n margin \n background \n float \n width (read up on width by percents) \n color \n clear \n overflow \n height \n font-size \n line-height', 'If you finish early Slack the TAs or raise your hand to call their attention. TAs will reassign you to help others in the class.');
INSERT INTO module1 ('title', 'description', 'countDown', 'stepOne') VALUES ('CSS Positioned Layout', 'exercise ten', '5:00', 'Review the files provided');
INSERT INTO module1 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour', 'stepFive', 'stepSix') VALUES ('CSS Positioned Activity', 'exercise eleven', '5:00', 'Work with the same or different partners on this activity, but make sure **each** member of the group is typing out their own code!', 'Create a file called `positioning.html` and a file called `positioning.css`.', 'Using HTML/CSS, create the layout shown on the screen.', 'For reference, the colors used on the screen are `#eee` and `#999`.', 'For further reference, you can generate paragraphs of lorem ipsum text using <http://www.lipsum.com/feed/html>. You need to make this page scroll to see how the fixed position element behaves.', 'HINT: Use the code from the last few activities to help get you started.');


-- module2 seeds
INSERT INTO module2 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree') VALUES ('Hack Websites', 'exercise one', '15:00', 'For the next 15 minutes, take a website that you commonly use (Amazon, Google, Huff Po, etc.) and heavily modify it using the Google Developer Tools.', 'Be sure to at least modify: \n Content (Change words) \n Colors \n Spacing \n Etc.', 'Slack out a screenshot to the class when you’re done.');
INSERT INTO module2 ('title', 'description', 'countDown', 'stepOne', 'stepTwo') VALUES ('Modify Own Websites', 'exercise two', '10:00', 'For the next 10 minutes, take a website that you yourself worked on (ex: In-Class activities, homework assignments, etc.), and utilize the Google Developer Tools to help you test changes in real-time.', 'Focus on getting more comfortable using the Developer Tools. Trust us. You will WANT to use these Developer Tools as you proceed in this course.');
INSERT INTO module2 ('title', 'description', 'countDown', 'stepOne') VALUES ('Multiple CSS', 'exercise three', '5:00', 'For your reference');
INSERT INTO module2 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour', 'stepFive', 'stepSix', 'stepSeven') VALUES ('Reset CSS', 'exercise four', '5:00', 'Follow the instructions in the HTML document to incorporate a reset.css file into a basic HTML file.', 'Student is to find a reset.css from Google and put it into their directory', 'Note the impact the reset file makes after its inclusion.', 'How can you determine the styles that the browser is using by default (Without the reset being used)?', 'Discuss with a partner: Why are resets important?', 'Hint: You should be using the CSS made available on this link: <http://meyerweb.com/eric/tools/css/reset/>', "Bonus: Incorporate a CSS reset into any page you've worked on to date.");
INSERT INTO module2 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour', 'stepFive', 'stepSix', 'stepSeven', 'stepEight', 'stepNine', 'stepTen', 'stepEleven', 'stepTwelve') VALUES ('Github Pages Personal', 'exercise five', '5:00', 'Now that we have gone over how to create a personal website using GitHub Pages, it is time to publish your own personal website! See the guide below as a reminder of what steps you need to take.', 'Build a basic HTML page and deploy it to github pages.', 'Once your personal webpage is live, slack out the link to it so that everyone can see what you have made.', 'Create a new repo that is named `<<YOUR USERNAME>>.github.io` where <<YOUR USERNAME>> is your GitHub username. Double check that you use exactly your username. (For example, janedoe.github.io would be the GitHub pages repo name for the GitHub user "janedoe")', 'Navigate into a folder and clone the repo into it', 'Add an HTML file named `index.html` and code out a basic webpage (or use a previous page)', 'Add, commit, and push your changes into the repository', 'Navigate to `<<YOUR_USERNAME>>.github.io` and you will find that your new web page has gone live! (again, where <<YOUR USERNAME>> is your GitHub username. - we just use that as a placeholder.)', 'Bonus: Spruce up your personal website page: add extra tags and flesh your page out some more - give it some pop', "Bonus: Push updates to your personal website multiple times. You'll see it update on the live URL!", 'Bonus: Add a few new pages to your website', 'Bonus: Add CSS to your deployed webpage, including a CSS Reset');
INSERT INTO module2 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour', 'stepFive', 'stepSix', 'stepSeven', 'stepEight', 'stepNine', 'stepTen', 'stepEleven', 'stepTwelve') VALUES ('Github Pages Project', 'exercise six', '5:00', "In this activity you'll practice creating github pages with projects. You'll build a website about your favorite type of animal!", 'Create a header that will act as a title for the page', "Create a few short paragraphs describing the animal's best characteristics.", 'Include at least one picture of the animal', 'Once you have created your HTML add, commit, and push your files up to GitHub Pages. \n Make sure to navigate to your page in the web browser to ensure your website is live', 'Create a new repository on your GitHub account. *You can name this repository whatever you would like.*', 'Once inside of the repository, create a new file and name it `index.html`', "Add your HTML into this file, save it, and then navigate into your repository's `Settings` tab.", 'Scroll down to the GitHub Pages section and then, in the section labeled `Source`, select that you would like to use the `master` branch as your source.', 'Navigate to `<<YOUR USERNAME>>.github.io/<<REPO NAME YOU CHOSE>>` and you will find that your new web page has gone live! (For example, if your GitHub username is `johndoe` and the project is `cssDemo`, your URL would be `johndoe.github.io/cssDemo`)', "See if you can use your personal site from the previous activity as a portfolio that can be used to show off all of the work you have done in the past. Update it to link to this activity's site.", 'Try to create a navigation system which links from your personal website to this new animal site and vice-versa. \n Have some fun! Test your HTML and CSS skills by going above and beyond with your page!');
INSERT INTO module2 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour', 'stepFive', 'stepSix') VALUES ('CSS Typography', 'exercise seven', '5:00', "In this activity, you'll be modifying CSS properties to style your text in different ways.", 'Using the `html-template` file provided to you, create an external CSS stylesheet to modify the typography of each of the body paragraphs.', 'Be sure to modify the following CSS properties for each paragraph of your page: \n font-family \n font-size \n font-weight \n line-hight', "Hint: You will need to do three things to accomplish this task. \n Link to a CSS page that you'll make \n Create classes for each paragraph \n Add in styles for each class", 'Bonus: If you finish early, read about http://typeplate.com/ and see if you can figure out how to incorporate it into your site.', "Bonus: If you still finish early, spend some time trying to actually make the page look nice. Think about what's aesthetically pleasing and push yourself to create it.");
INSERT INTO module2 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree') VALUES ('Google Font Demo', 'exercise eight', '5:00', 'This activity demonstrates how to incorporate new fonts into a web page.', 'This activity demonstrates how to incorporate new fonts into a web page.', 'Bonus: If you finish early, read about Font Awesome icons and see if you can figure out how to incorporate one onto your page.');
INSERT INTO module2 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour', 'stepFive', 'stepSix') VALUES ('Pseudo Class', 'exercise nine', '5:00', "In this activity you'll use pseudo-classes to style elements based on their state.", 'Create a series of links and modify the pseudo-classes associated with their Default, Active, Hover, and Focus States.', 'Hint: Nope. No starter code. Gotta do this from scratch :-)', 'If you finish early, incorporate a pseudo-class we haven’t covered in your page. Then read about “pseudo-elements” and try to incorporate one as well.', 'Slack out the code and screenshot if you end up completing the bonus.', 'Learn about css transitions to add a fading hover effect to a link (\\&lt;a>)');
INSERT INTO module2 ('title', 'description', 'countDown', 'stepOne') VALUES ('Wheres CSS', 'exercise ten', '5:00', 'For your reference');
INSERT INTO module2 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour', 'stepFive', 'stepSix', 'stepSeven', 'stepEight') VALUES ('Bootstrap Demo', 'exercise eleven', '5:00', "In this activity, we'll get some experience working with Bootstrap components.", 'Working with someone closest to you:', 'Navigate to the Twitter Bootstrap website.', 'Then copy the link to the Bootstrap CSS file into one of your old HTML files.', 'Look through the Bootstrap CSS or Components list and incorporate at least three Bootstrap elements onto your page.', 'Slack a screenshot of your page to your section’s channel when you are done.', 'Hint: First include a link to Bootstrap’s CSS. Then visit the Bootstrap page on CSS or Components.', 'If you finish early, let the TAs know so you can be sent to help others around you.');
INSERT INTO module2 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree') VALUES ('Warmup Bootstrap', 'exercise twelve', '5:00', 'As a repeat of last class, quickly create an HTML web page.', 'Then add in a Bootstrap component of your choosing.', 'Hint: Copy the Bootstrap CSS link. Then copy the code from any Bootstrap element or CSS.');
INSERT INTO module2 ('title', 'description', 'countDown', 'stepOne') VALUES ('Instructor Grids', 'exercise thirteen', '5:00', 'For your reference');
INSERT INTO module2 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour') VALUES ('Text Layout', 'exercise fourteen', '5:00', 'Using Twitter bootstrap, create a layout that looks like: ![text-layout activity design](text-layout.png)', 'Hint: Spend some time prior to coding on drawing out the grid layout.', 'Hint: Count the number of rows and columns.', 'Hint: Then use the bootstrap grid syntax to code it out.');
INSERT INTO module2 ('title', 'description', 'countDown', 'stepOne') VALUES ('Instructor Layout', 'exercise fifteen', '5:00', 'For your reference');
INSERT INTO module2 ('title', 'description', 'countDown', 'stepOne', 'stepTwo') VALUES ('Card Layout', 'exercise sixteen', '5:00', 'Working in pairs and using Twitter Bootstrap make a page that looks like the following image: ![Card-layout design](Solved/card-layout.png)', 'Be sure to note the: \n Grid Layout \n Navbar \n Sidebar card \n Thumbnail');
INSERT INTO module2 ('title', 'description', 'countDown', 'stepOne') VALUES ('Insturctor Media', 'exercise seventeen', '5:00', 'For your reference',);
INSERT INTO module2 ('title', 'description', 'countDown', 'stepOne', 'stepTwo') VALUES ('Student Media', 'exercise eighteen', '5:00', 'Add more styling to the CSS file such that the `@media screen` code creates padding and margins for the two boxes when the page is below 768px.', "Note: This isn't easy. Just give it your best shot. Even if you don't get the exact solution, but are able to better understand how media queries work, that's a solid takeaway.");


-- module3 seeds
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree') VALUES ('Code Dissection', 'exercise one', '5:00', 'Open the file in Chrome, and observe what happens.', 'With a partner, try to explain how the code connects to the events that happen on the page.', "Note: We haven't covered JavaScript before, but a big part of being a developer is learning on the fly!");
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne') VALUES ('Basic Variables Demo', 'exercise two', '5:00', 'For your reference');
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour') VALUES ('Pizza Varibales', 'exercise three', '5:00', 'Using the instructions in the file above, fill in the missing JavaScript code to create variables.', 'When you are done, open the file in Chrome and check the output.', 'If you successfully completed the activity, you should see a series of pop-up windows with text inside.', 'Finally, look at the rest of the code and try to figure out why the text displayed the way it did.');
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne') VALUES ('Console Log Demo', 'exercise four', '5:00', 'For your reference');
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne', 'stepTwo') VALUES ('Pizza Console', 'exercise five', '5:00', 'Using the file above as a guide, modify the code so that it uses `console.log` instead of alerts to display messages.', 'With a partner, discuss the difference between using `console.log` and `alert`.');
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne') VALUES ('Prompt Demo', 'exercise six', '5:00', 'For your reference');
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour') VALUES ('Prompt Sushi', 'exercise seven', '5:00', 'Write JavaScript code that does the following:', 'Using a confirm, ask the user, "Do you like \_?" Store their response in a variable.', 'Using a prompt, ask the user, "What kind of \_ do you like?" Store their response in a variable.', 'Alert both variables to the screen.');
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne') VALUES ('Conditional Demo', 'exercise eight', '5:00', 'For your reference');
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour', 'stepFive') VALUES ('Conditional Activity', 'exercise nine', '5:00', 'Create a website (from scratch) that asks users if they eat steak.', 'If they respond with "yes", write the following to the page: "Here’s a Steak Sandwich!"', 'If they respond with "no", write the following to the page: "Here’s a Tofu Stir-Fry!"', 'Bonus: Ask what the user’s birth year is. If they are under 21, alert the following: "No Sake for you!"', 'Hint: You will need to use `document.write()` from a few slides back.');
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne') VALUES ('Conditional Activity 2', 'exercise ten', '5:00', 'For your reference');
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne') VALUES ('Arrays Demo', 'exercise eleven', '5:00', 'For your reference');
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree') VALUES ('Arrays Activity', 'exercise twelve', '5:00', 'With a partner, take a few moments to look over the code in the file above.', 'Above each `console.log()` write a comment "predicting" what you think the output will be.', 'Hint: Comments are the grayed lines that begin with `//`. These lines are ignored by JavaScript, and they allow you to explain your code. Commenting your code is an extremely useful habit to get into as it allows other developers to more easily read your code. It will also help you better understand your own applications when you look back at them.');
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour', 'stepFive', 'stepSix', 'stepSeven') VALUES ('Bands', 'exercise thirteen', '5:00', 'Create a website that accomplishes the following:', 'Create an array of your favorite bands.', "With a prompt, ask the user's favorite band.", "If it's one of your favorites, alert: 'YEAH I LOVE THEM!'", "If it's not, alert: 'Nah. They're pretty lame.'", 'Hint: You will need to research how to use `.indexOf()`.', 'Hint: You will need to research how to use `.toLowerCase()`.');
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne', 'stepTwo') VALUES ('JS Dissect', 'exercise fourteen', '5:00', 'Take a few minutes to quickly look through the above file. With a partner, discuss what you expect to happen when the code is run.', 'Prepare to share your thoughts with the class.');
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne', 'stepTwo') VALUES ('Cool People Array', 'exercise fifteen', '5:00', 'Follow the instructions provided in the file to `console.log` each of the names in the `coolPeople` variable.', 'Hint: You should be repeating the same line 6 times.');
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour') VALUES ('Array Setting', 'exercise sixteen', '5:00', 'Follow the instructions in the file above to convert each item in the array to lower case.', 'Make sure to only add in lines of code where instructed.', "Hint: You will need to use the `.toLowerCase()` method. Research if you don't remember how to use it.", 'Be prepared to share when time is up.');
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree') VALUES ('My First Loop', 'exercise seventeen', '5:00', 'With a partner, spend a few moments trying to dissect the code in the file.', 'Try to explain to one another what is happening with each line of code.', 'Feel free to do research if you are stumped. As a hint, look into the phrase "for loop."');
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree') VALUES ('Zoo Loop', 'exercise eighteen', '5:00', 'Use `for` loops to rewrite the file.', 'If you need help, use the code from the previous example as a guide.', 'Once you think your code is functioning properly, share it with the person sitting next to you.');
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne', 'stepTwo') VALUES ('Another Loop', 'exercise nineteen', '5:00', 'Starting from scratch, create a `for` loop that console logs the following lines: "I am 0", "I am 1", "I am 2", "I am 3", "I am 4"', "Note: Don't use an array!");
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour') VALUES ('Hard Loop', 'exercise twenty', '5:00', 'Starting from scratch, write code that loops through the following array and logs the name of each animal on the farm to the console:', 'var myFarm = ["chickens", "pigs", "cows", "horses", "ostriches"];', "Then check if the first letter in the animal's name begins with a "c" or "o". If it does, create an alert saying, 'Starts with 'c' or 'o'!''", 'Hint: You can access the first character of a string as if it were the first element of an array.');
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne') VALUES ('Events', 'exercise twenty-one', '5:00', 'For your reference');
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour') VALUES ('Pseudo Code', 'exercise twenty-two', '5:00', 'With a partner, spend a few moments outlining all the steps and conditions that go into a single game of rock paper scissors.', 'Try to break it down into steps that you could code out.', 'Think of basic elements like loops, if-else statements, arrays, alerts, etc.', 'Be prepared to share your outlines approach.');
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour', 'stepFive', 'stepSix', 'stepSeven', 'stepEight', 'stepNine') VALUES ('RPS Coded', 'exercise twenty-three', '5:00', 'In groups of 4, begin the process of coding out the rock-paper-scissors game.', 'Rules for rock-paper-scissors', 'Rock: wins against scissors, loses to paper, and ties against itself.', 'Paper: wins against rock, loses to scissors, and ties against itself.', 'Scissors: wins against paper, loses to rock, and ties against itself.', "Do as much as you can on your own, but don't be afraid to ask for help if you feel your team is struggling.", 'Note: A `for-loop` is not technically necessary to make our RPS game, but could be used. Focus on the topics we have just covered when thinking about how to build out the game.', 'Note: Don’t use `document.write` as it will delete the contents of your page including your JavaScript. Use `document.querySelector` or `document.getElementById`, alongside either `innerHTML` or `textContent`, to write to the DOM.', "Note: Don't worry. We know this is a very challenging assignment. We also know that you won't know where to start. In fact, we haven't shown you EVERYTHING you need yet, but that's okay. Part of being a developer is figuring things out on your own through trial and error.");
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne') VALUES ('Recap', 'exercise twenty-four', '5:00', 'For your reference');
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour') VALUES ('Loop TV', 'exercise twenty-five', '5:00', 'Run the program in the file above.', 'Then, with a partner, fill in the missing comments for each line of code.', 'Make sure both of you can fully explain what each line means.', 'Be prepared to share with the class!');
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne') VALUES ('Superhero Logging', 'exercise twenty-six', '5:00', 'For your reference');
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour') VALUES ('My First Functions', 'exercise twenty-seven', '5:00', 'Working in pairs and using the starter file above, fill in the missing functions and function calls.', "Note: Try to finish all four functions if you can, but don't be distressed if you only get one or two. The important thing is that you get at least one function fully done.", 'Hint: Look back to previous example if you need help.', 'Bonus: If you finish w/ the first four functions create two functions, `adderReturn()` and `multiplierReturn()`, that return the value when you call the function rather than using console.log.');
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne') VALUES ('Good Array', 'exercise twenty-eight', '5:00', 'For your reference');
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne') VALUES ('Joan of Arc Arrays', 'exercise twenty-nine', '5:00', 'For your reference');
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne') VALUES ('Gandalf The Grey Objects', 'exercise thirty', '5:00', 'For your reference');
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree') VALUES ('My First Object', 'exercise thirty-one', '5:00', 'With a partner, spend the next few moments studying the code in the file above.', 'Then write code below each comment to log the relevant information about the provided `car` object.', 'Bonus: If you finish early, create a brand new object of your own. Slack out a snippet of the code to the class when you are done. Be creative!');
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour', 'stepFive', 'stepSix') VALUES ('Car Game', 'exercise thirty-two', '5:00', 'Using the code from the previous activity as a starting point, create a complete application that meets the following specifications:', 'Users can enter keyboard input (letters).', "Each of the car's methods are assigned to a key.", 'When the user presses a key, it calls the appropriate function.', "These letters also trigger a global function called `reWriteStats()` that logs the car's make, model, color, mileage, and `isWorking` status to the console.", "You WILL need to use the `document.onkeyup()` function to collect input from the user's keyboard.");
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne') VALUES ('Scope', 'exercise thirty-three', '5:00', 'For your reference');
INSERT INTO module3 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour', 'stepFive', 'stepSix') VALUES ('Question Game', 'exercise thirty-four', '5:00', 'Starting from a blank HTML file, create an array with 10 question objects. Each object in the array should be structured as follows:', '`{ q: "QUESTION", a: "ANSWER" }`', 'Then create code that will ask the user questions, one by one. The user must answer by hitting t (for true) or f (for false).', "Check the user's answer against the correct answer, and provide them with an alert telling them if they are right or wrong.", "Bonus: Keep track of the user's score.", "Hint: Don't worry about having DRY code to start with. Just focus on getting working code first.");


-- module4 seeds
INSERT INTO module4 ('title', 'description', 'countDown', 'stepOne') VALUES ('JS Generators', 'exercise one', '5:00', 'For your reference');
INSERT INTO module4 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree') VALUES ('JS Drink List', 'exercise two', '5:00', 'For your reference', 'Using the file above as a starting point, add the missing code such that your JavaScript generates HTML content that displays all of the drink options.', 'Hint: You will need a for-loop. Inside your for-loop you will need to use each of the following methods: `createElement`, `.innerHTML`, and `.appendChild`.', "BonusInstead of using a `for` loop, try searching about the use of the jQuery `.each` method.");
INSERT INTO module4 ('title', 'description', 'countDown', 'stepOne') VALUES ('jQuery Generators', 'exercise three', '5:00', 'For your reference');
INSERT INTO module4 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree') VALUES ('jQuery Drink List', 'exercise four', '5:00', 'Re-factor (re-write) your previous drinkList code from earlier, but this time use jQuery to complete all of the same tasks.', 'Your final code should NOT have any of the following methods: `createElement`, `textContent`, or `appendChild`.', 'Hint: Don’t forget to “incorporate” jQuery before you begin.');
INSERT INTO module4 ('title', 'description', 'countDown', 'stepOne') VALUES ('On Click Basic', 'exercise five', '5:00', 'For your reference');
INSERT INTO module4 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour', 'stepFive') VALUES ('Sandwich Click', 'exercise six', '5:00', 'Add in the missing code such that clicking any of the sandwiches causes…', 'An alert message to popup saying something snarky about the sandwich type.', 'A second alert message that displays to the user the number of that specific sandwich they’ve eaten.', 'Hint: You will need counter variables.', 'Bonus: Add an image to the `image-div` on the click event.');
INSERT INTO module4 ('title', 'description', 'countDown', 'stepOne') VALUES ('Trigger Random', 'exercise seven', '5:00', 'Add in the missing code such that clicking the big blue button triggers a random number (between 1 and 1000) to be selected and prominently displayed in the random-number div.');
INSERT INTO module4 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour') VALUES ('Lottery Generator', 'exercise eight', '5:00', 'Using the code from the previous random number generator as a starting point, create a lottery generator.', 'In our case, the lottery number should pick a random 9 digit number (and always 9 digits). As an example: 886563264.', 'Display this number in the random-number div.', 'Then when a user clicks again, have the code create a new row with the latest number at the top.');
INSERT INTO module4 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour', 'stepFive') VALUES ('Number Checker', 'exercise nine', '5:00', 'Using the number-checker.html as a starting point, add code so that:', 'A computer picks a random number between 1 and 4.', 'Users then “click” the buttons numbered 1 – 4.', "If the user’s number matches the computer’s number, display text informing them that they've won in the 'Result' panel. Otherwise, display text informing them that they've lost.", 'If you finish early, try to improve the aesthetics.');
INSERT INTO module4 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour', 'stepFive', 'stepSix') VALUES ('Captain Planet Game', 'exercise ten', '5:00', 'Look at the jQuery API Docs https://api.jquery.com/ and add a button of your own that gives Captain Planet a new power.', 'Click to… Stretch Captain Planet!', 'Click to… Trigger a maniacal laugh!', 'Click to… Create clones of Captain Planet!', 'Click to… Create fire or water (hint: images)!', 'Slack out a screenshot of the working example.', '', '', '', '', '', '');
INSERT INTO module4 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour', 'stepFive') VALUES ('Fridge Game', 'exercise eleven', '5:00', 'Working in groups of 3, complete the code for the fridge activity such that:', 'JavaScript dynamically generates buttons for each of the letters on the screen.', 'Clicking any of the buttons leads the SAME letter to be displayed on the screen.', 'Hitting the clear button erases all of the letters from the fridge.', 'Note: This is a challenging exercise. You may want one person to type, while the other two watch over to catch bugs and/or research necessary snippets.');
INSERT INTO module4 ('title', 'description', 'countDown', 'stepOne') VALUES ('Crystal Example', 'exercise twelve', '5:00', 'For your reference');
INSERT INTO module4 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour', 'stepFive') VALUES ('Scope One', 'exercise thirteen', '5:00', 'Take a few moments dissecting what I just said.', 'Look at the file above, and explain to the person next to you what is meant by:', 'The terms parent function and child function', 'The concept that child functions can access parent variables, but not vice versa.', 'Be prepared to share!');
INSERT INTO module4 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour') VALUES ('Scope Two', 'exercise fourteen', '5:00', 'Take a few moments to dissect the code in the file above.', 'Try to predict what will be printed in each of the examples.', 'Be prepared to share!', 'Note: Pay attention to the unusual use of the keyword: `this`');
INSERT INTO module4 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree') VALUES ('Scope Three', 'exercise fifteen', '5:00', 'Take a few moments to dissect the code in the file above.', 'Try to predict what will be printed in each of the examples.', 'Be prepared to share!');
INSERT INTO module4 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour', 'stepFive', 'stepSix', 'stepSeven', 'stepEight') VALUES ('Color Correcter', 'exercise sixteen', '5:00', "For this activity, you'll be creating a 'correct color' game.", "The game should generate a random color string (ie, 'green' or 'blue') that is displayed in a random color. We'll cause this the current color.", "It should also generate a list of random color strings that are also displayed in random colors. We'll call this the color list.", 'The user must click the *name* of the color in the color list that matches the *color* of the current color.', 'Make an alert telling the user whether they chose correct or incorrect.', 'After the alert, the game should reset.', 'Checkout the below gifs to see how the game should work.', 'Bonus: Make sure that none of the colors appear in the same color as their name.');
INSERT INTO module4 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour', 'stepFive', 'stepSix') VALUES ('Scope Quiz', 'exercise seventeen', '5:00', 'Spend a few moments studying the code with the person sitting next to you.', 'Then run the program in the browser.', "Once you run the program, you'll find that Code Block 1 leads to different alerts than Code Block 2.", 'Ask your partner which Code Block is behaving the way you would expect.', 'Then work with your partner to try and identify the specific difference that is causing the issue with the faulty block.', 'Once you spot the issue, try to explain to your partner why JavaScript is handling these Code Blocks differently.');
INSERT INTO module4 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree') VALUES ('This Example', 'exercise eighteen', '5:00', 'Using the comments in the guide answer each of the questions asked in the file.', 'Focus your attention on trying to wrap your mind around the concept of "this" and the unique role it can play in code.', 'Then try to explain to your partner how "this" works, focus on the first three examples.');
INSERT INTO module4 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree') VALUES ('Cobweb', 'exercise nineteen', '5:00', 'Create the missing the code such that you can retrieve the requested item from the `theCobWeb` object.', 'Note: This exercise is actually very relevant to work as a web developer, as data is often relayed across websites in the form of deeply nested JavaScript objects like this one.', "Bonus: If you finish early, begin pondering the bonus item. This is a very challenging exercise. It's impossible to complete in the allotted time. If you're feeling valiant - complete it outside of class and come back to instructors/TAs to go over it. This will arm you for difficult interview questions in the future.");
INSERT INTO module4 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour', 'stepFive') VALUES ('jQuery Calculator', 'exercise twenty', '5:00', 'Create the JavaScript logic necessary to add functionality to the jQuery Calculator.', 'Your calculator should be able to handle basic mathematical operations like addition, subtraction, multiplication, etc.', 'You should be making use of the existing buttons.', 'You should be making use of the existing placeholders for entering content (i.e. "firstNumber", "operator", "secondNumber", "result").', "You should have fun and push yourselves! This is a challenge activity—which means, if you get it done, you are a King of jQuery. If you don't, no sweat. The important thing is that you learned at least a FEW things along the way.");
INSERT INTO module4 ('title', 'description', 'countDown', 'stepOne') VALUES ('Crash Course', 'exercise twenty-one', '5:00', 'For your reference');

-- module5 seeds
INSERT INTO module5 ('title', 'description', 'countDown', 'stepOne') VALUES ('Word Guess', 'exercise one', '5:00', 'For your reference');
INSERT INTO module5 ('title', 'description', 'countDown', 'stepOne') VALUES ('Captain Planet', 'exercise two', '5:00', 'For your reference');
INSERT INTO module5 ('title', 'description', 'countDown', 'stepOne') VALUES ('Lottery Generator', 'exercise three', '5:00', 'For your reference');
INSERT INTO module5 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour', 'stepFive', 'stepSix', 'stepSeven', 'stepEight', 'stepNine') VALUES ('Coin Flip', 'exercise four', '5:00', 'Make a Coin Flipper game.', 'Follow the directions in the html file.', 'How the app works:', 'The user chooses Heads or Tails, and the computer randomly selects heads or tails and displays the outcome on the screen. The app then displays whether or not the user won or lost.', 'If heads, use: <http://random-ize.com/coin-flip/us-quarter/us-quarter-front.jpg>', 'If tails, display: <http://random-ize.com/coin-flip/us-quarter/us-quarter-back.jpg>', 'Bonus: Put your JavaScript in its own file and link to it in the HTML.', 'Bonus: Keep track of the number of Heads or Tails and display the results on the screen.', 'Bonus: Add CSS styling.');
INSERT INTO module5 ('title', 'description', 'countDown', 'stepOne', 'stepTwo') VALUES ('This', 'exercise five', '5:00', 'Find a partner.', 'Together, open the supplied HTML file and answer all questions.');
INSERT INTO module5 ('title', 'description', 'countDown', 'stepOne') VALUES ('Timeout', 'exercise six', '5:00', 'For your reference');
INSERT INTO module5 ('title', 'description', 'countDown', 'stepOne') VALUES ('Context', 'exercise seven', '5:00', 'For your reference');
INSERT INTO module5 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree') VALUES ('Simple Timer', 'exercise eight', '5:00', 'Make a page with a simple timer that sends an alert and plays a sound after 15 seconds.', 'Have it send an alert when 5 seconds has passed, 10 seconds has passed and when the time is up.', 'You will use this to time the break!');
INSERT INTO module5 ('title', 'description', 'countDown', 'stepOne', 'stepTwo') VALUES ('Interval', 'exercise nine', '5:00', 'There is a small bug in this code. With a partner try and see what is wrong.', 'Explain to each other what is happening in this file.');
INSERT INTO module5 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour', 'stepFive') VALUES ('Stopwatch', 'exercise ten', '5:00', 'Open stopwatch.js and follow the instructions in the file.', 'You will not not need to edit the HTML file we give you.', 'Use jQuery and the timing events you learned today to create a stopwatch with Start, Stop and Reset buttons.', 'Bonus: Add a lap timer.', 'Bonus: Use CSS to style the timer');
INSERT INTO module5 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour') VALUES ('Slideshow', 'exercise eleven', '5:00', 'Create a slideshow using jQuery and JavaScript Timing Events.', 'Feel free to find your own images or use the ones provided in the images directory.', 'Display the "loading.gif" image in between each picture for one second.', 'Bonus: Add CSS styling.');
INSERT INTO module5 ('title', 'description', 'countDown', 'stepOne') VALUES ('Bash', 'exercise twelve', '5:00', 'For your reference');
INSERT INTO module5 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour') VALUES ('Bubble Sort', 'exercise thirteen', '5:00', 'Write a function that sorts an array of numbers in order. Use the starter code provided below, and have the unsorted array show in the `#start` div.', 'When the user clicks the `button`, the sorted result should be displayed in the `#result` div.', 'You can use this array in your JavaScript code:', 'This link could be helpful to give you an idea of one way to do it: <http://www.stoimen.com/blog/2012/02/20/computer-algorithms-bubble-sort>');
INSERT INTO module5 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour', 'stepFive', 'stepSix', 'stepSeven', 'stepEight', 'stepNine', 'stepTen') VALUES ('Buy Low Sell High', 'exercise fourteen', '5:00', 'Xena is an amateur day trader. Her portfolio consists of IAG. IAG is a mineral exploration company. Xena believes IAG has opportunity based on a gut feeling she has. Xena bought 10000 shares of IAG at $1.45 per share at 10 am on 12/12/15. She ended up selling it 20 minutes later at $1.74 making a $2900 profit. Xena just made 2 months of rent in 20 minutes.', 'These were all the prices of IAG on 12/12/15 during a one hour period in chronological order:', '$1.42, $1.32, $1.45, $1.20, $1.34, $1.74, $1.10, $1.89, $1.42, $1.90', 'Write an efficient function that takes an array of stock prices (assuming they are in chronological order) and the shares purchased. The function would determine the biggest profit possible during that period if someone bought the stock at the lowest price and sold it at the highest.', 'You must buy before you sell. No shorting.', 'By efficient, you should loop over the array only once!', 'Bonus: Put in validation so that there are at least 3 stock prices in the array', 'Bonus: Consider case when the stock goes down every moment', 'Bonus: You would want to return the minimum negative profit.', "Bonus: For example, if you bought at $22 and sold at $21, you would lose $1 per share. That's the best case scenario if you had to buy and sell this stock within an hour.");
INSERT INTO module5 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour') VALUES ('File Extension', 'exercise fifteen', '5:00', 'You have an array of filenames with extensions. Sort the files into arrays based on whether or not they are videos or images.', 'var files = ["pavans_first_birthday.mov","owens_asleep_at_the_computer.jpg","michael_fights_a_polar_bear.mp4","nate_road_rage.avi","ruby_skydiving.jpeg","ken_getting_his_black_belt.png","dan_winning_underground_street_race.mov","its_hard_to_come_up_with_file_names.gif","seriously_this_is_taking_too_long.mpg","i_wonder_how_many_of_these_i_should_have.png","probably_a_few_more.avi","nutmeg_is_clawing_my_sneakers_again.mp4","cat_i_will_destroy_you.gif","i_wish_we_had_a_dog.jpeg","stop_looking_at_me_like_that_nutmeg.mpeg","aww_i_cant_hate_you.png","omg_my_sneakers.avi","cat_you_are_the_worst.mp4"];', 'Image File Extensions: jpg, gif, jpeg, png', 'Video File Extensions: mov avi, mpeg, mp4, mpg');
INSERT INTO module5 ('title', 'description', 'countDown', 'stepOne') VALUES ('Fizz buzz', 'exercise sixteen', '5:00', 'Write a script that prints the numbers 1 to 100 in the console. But for multiples of three, print `Fizz` instead of the number. For multiples of five, print `Buzz`. For numbers which are multiples of both three and five, print `FizzBuzz`.');
INSERT INTO module5 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour', 'stepFive', 'stepSix', 'stepSeven', 'stepEight') VALUES ('Floats Box Model', 'exercise seventeen', '5:00', 'DO NOT TOUCH THE HTML.', 'Get the `#right` div next to the `#left` div', "Bonus: Don't change any widths.", 'Get the Background color to extend past the two floated divs.', 'Make the `#right` div end where the #left div ends. Make it so you can scroll to see the text.', 'Make the `#after` div appear after the text boxes.', 'Center the `#text-wrapper`.', 'Make the space around the text with the navy background so it looks like the picture below.');
INSERT INTO module5 ('title', 'description', 'countDown', 'stepOne') VALUES ('Git Github', 'exercise eighteen', '5:00', 'For your reference');
INSERT INTO module5 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree') VALUES ('Is Pangram', 'exercise nineteen', '5:00', 'A pangram is a sentence that contains all the letters of the English alphabet at least once. For example: `The quick brown fox jumps over the lazy dog.`', 'Write a function that takes a string and determines whether the string is a pangram, without typing out the full alphabet anywhere in your code.', 'Bonus: Handle punctuation in the sentence.');
INSERT INTO module5 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree') VALUES ('jQuery To Do', 'exercise twenty', '5:00', 'Use the provided starter HTML to make a list app. This app will take text from an input box and display it in another box elsewhere on the page. Add a way to click and delete the entries you add, too.', 'Bonus: Add a new entry when you press the `return` key;', 'Bonus: Style it.');
INSERT INTO module5 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree') VALUES ('Media Queries', 'exercise twenty-one', '5:00', 'Add media queries to the provided CSS to make the page look like the screenshots below.', 'Note: For the picture, use `http://www.stevensegallery.com/768/200`', 'Note: The text divs are height limited and vertically scrollable.');
INSERT INTO module5 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour', 'stepFive', 'stepSix', 'stepSeven', 'stepEight', 'stepNine', 'stepTen') VALUES ('Palindrome Detector', 'exercise twenty-two', '5:00', 'A palindrome is a sentence that reads the same backwards and forwards: "Was it a car or a cat I saw?"', 'Reverse each word in a sentence and display it on the screen in the same order. For example, the sentence `This is an example` would become `siht si na elpmaxe`. If the sentence is a palindrome, have it display in red.', 'Note: Remove periods.', 'Note: Add the result to the page in the div with the id "Result".', 'Remove all "special characters" (commas, periods, etc).', 'Do not use the reverse() method.', 'Here are some test phrases to put in your JavaScript:', '"Otto bought a racecar he cannot afford."', '"Otto lost the deed to his house."', '"Otto needs Xanax."');
INSERT INTO module5 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour') VALUES ('Prime Checker', 'exercise twenty-three', '5:00', " Write a function that checks to see if a number is a prime number or not. Have it return `true` if it is, or `false` if it isn't.", 'For your reference', 'A Prime number is a number greater than one that can only be divided by one and itself.','https://www.mathsisfun.com/prime_numbers.html');
INSERT INTO module5 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour', 'stepFive', 'stepSix') VALUES ('Recursive Fibonacci', 'exercise twenty-four', '5:00', 'Take an integer `n` and return the first `nth` numbers of the Fibonacci Sequence.', 'For example, if you call the function with the number `10`, you should get back an array with `[1,1,2,3,5,8,13,21,34,55]` (The first 10 numbers of the Fibonacci Sequence).', 'The Fibonacci Sequence is a series of numbers, starting from 1, in which you get the next number by adding the previous two.', 'Note: Calculating the Fibonacci Sequence with a Recursive Function can take a lot of time to process if you use a large number (around 50 or more). This can cause your browser window to be unresponsive while it is calculating.', 'Here is an example of a simple recursive function. Watch `simple_recursion.mov` for an explanation and breakdown.', 'var simpleRecursion = function (n){if (n>0){console.log(n);simpleRecursion(n-1);} else{console.log("done");}};');
INSERT INTO module5 ('title', 'description', 'countDown', 'stepOne', 'stepTwo', 'stepThree', 'stepFour', 'stepFive', 'stepSix', 'stepSeven', 'stepEight', 'stepNine') VALUES ('String Calculator', 'exercise twenty-five', '5:00', 'Write a text based calculator. The calculator will take strings in this format:', '`Add 2 and 4`', '`Subtract 3 from 5`', '`Divide 6 by 2`', '`Multiply 3 by 7`', 'The calculator will then calculate and `return` the answer.', 'You only need to handle `subtract`, `add`, `divide`, and `multiply`.', 'Use a `switch` statement.', 'If a user enters a string not in the above format, return a error message that tells them what they did wrong.');

--sequelize module seeds
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`) VALUES ('1', 'Chirpy', 'exercise one', '5:00', ' Using the app skeleton provided to you:', ' Create a MySQL database named `\'chirpy\'` with a `\'chirps\'` table to hold your data.', ' Your `\'chirp\'` table should include a field for id, author, chirp, and time created.', ' Modify the connection.js file to create a connection to your database.', ' Modify the api-routes.js file so that there is a route for adding a new chirp, as well as retrieving all chirps.', ' Modify the chirps.js file so that the page interacts with the database.');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`, `Step_7`, `Step_8`, `Step_9`) VALUES ('2', 'Sequelize', 'exercise two', '15:00', ' Spend the next few minutes with your partner answering the following questions. You should be using the Sequelize Documentation (and whatever other references you find online).', ' Question: What is Sequelize?', 'Question: What advantages does it offer?', ' Question: How do I install it? How do I incorporate it into my app?', ' Question: What the heck is a Sequelize model? What role will it play?', '  Question: How would I model a table in Sequelize?', ' Question: How would I query for all the records where the Independence Year was less than 50 years ago?', 'How would I query the table, order it by descending Independence Years, and limit the results to just show 2 of the records.', '  Bonus: How do I use sequelize to make changes to an existing table with data in it?');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`) VALUES ('3', 'Chirpy-Sequelize', 'exercise three', '5:00', 'run server.js');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`) VALUES ('4', 'StarWars', 'exercise four', '5:00', ' Install the sequelize and mysql2 npm packages.', ' Delete the orm from config. In your app folder, create a model folder with a character.js file in the model\n', ' In character.js, model out the character table, as detailed in the schema.sql file located in the root of this project directory.\n', ' Remove all references to the old orm file and replace it with character.js\n', ' Use Sequelize methods in place of the orm calls to retrieve and insert data.\n', ' Update connection.js to use sequelize instead of the mysql package.\n');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`) VALUES ('5', 'sequelizeLibrary', 'exercise five', '10:00', ' Create a `"sequelize_library"` DB.', ' Modify `\'connection.js\'` to include your MySQL user/database information.', ' In the `\'models\'` folder, modify the `book.js` file to create a book model. Further details can be found inside this file.', '  Your book model must include a title, author, genre, page numbers.', ' Modify `\'api-routes.js\'` using sequelize query methods to create the required routes.', '  Modify `\'html-routes.js\'` to deliver the required html files.');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`) VALUES ('6', 'sequelizeCLI', 'exercise six', '5:00', 'Teacher will go over this. ');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`, `Step_7`, `Step_8`, `Step_9`, `Step_10`) VALUES ('7', 'Orm to Sequelize', 'exercise seven', '20:00', ' Create a new local MYSQL database called \'todolist\', but don\'t create any tables.', '   Delete any references to the orm.js file inside the `api-routes.js` file.\n', '   Delete the config folder.', ' While inside the activity folder, run npm install in terminal.', ' In terminal, type in the following command: \"sequelize init:models & sequelize init:config\"', ' Step 5 should have created a config and a models folder for us. Navigate to the config folder, open `config.json`, and modify the development object\'s \"database\",\"username\" and \"password\" values to match your MYSQL database on your machine. Include the database port number, if not using the default.', ' Navigate to the models folder and create a new file called `todo.js`. Create a Todo model with columns for \"text\" (DataTypes.STRING), and \"complete\" (DataTypes.BOOLEAN).', '  Navigate to the server.js file and require all of our models by requiring the models folder. Save this to a variable and name it \"db\".', ' Sync the models by running db.sequelize.sync() before we start the express server.', ' In your terminal, run \"node server\". Check MYSQL Workbench to see if a Todos table was created. If so, you were successful. If not, check your terminal for any errors.');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`, `Step_7`) VALUES ('8', 'Sequelize-Create-Read', 'exercise eight', '20:00', '  Open the folder and run `npm install`.', '  Update the `config.json` file\'s development object with your own local MYSQL database settings.', '  Navigate to the `api-routes.js` folder.', ' Add a Sequelize findAll method inside the GET route which finds all of the todos and returns them to the user as JSON.', ' Add a Sequelize create method to the POST route to save a new todo to the database using the data sent to the server in req.body.', '   To test if this worked, open your terminal and run `node server` and navigate to localhost:8080. If you are able to save new todos, you were successful.', '  Hint: We can access the Todo model here with \"db.Todo\"');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`, `Step_7`, `Step_8`, `Step_9`) VALUES ('9', 'Sequelize Update-Delete', 'exercise nine', '15:00', ' Open the Unsolved folder', '   Run `npm install`', '   Update the `config.json` file\'s development object with your own local MYSQL database settings.', '   Inside the `api-routes.js` file, look for the DELETE route and add a Sequelize method to delete the todo with the id available to us in `req.params.id`.', '  Inside of the same file, look for the PUT route and add a Sequelize method to update a todo with the new todo data available to us inside req.body.', ' Again, you won\'t need to touch the front end HTML or JavaScript to make any of this work.', '   HINT: you will need to pass in an options object with a \"where\" attribute into both methods in order to filter these queries to target the Todos we want to update or delete.', '  Navigate to localhost:8080. If you can update and delete todos without errors, you were successful.', ' If you get stuck or finish early, discuss the documentation for the `update` and `destroy` methods with your partner ');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`, `Step_7`, `Step_8`) VALUES ('10', 'sequelize validations', 'exercise ten', '15:00', ' Open the folder sent out to you.', ' Run `npm install`.', ' Update the `config.json` file\'s development object with your own local MYSQL database settings.', '  Modify the `todo.js` file so that the Todo model has a flag to prevent the text field from being null. Also add a validation to make sure the text field is at least one character, but no more than 140 characters.', '  Modify the complete field in our Todo model so that it supplies a default value of false if one is not supplied during Todo creation.', '  Once a Sequelize model has been created and synced for the first time, any changes we make to our Todo model won\'t be picked up by our database. The easiest way to get around this during the development process is to pass \"{ force: true }\" as an argument into our sync method inside `server.js` file. This will make it so that every time we run our app, our Todos table will be dropped and recreated with the new configuration. ', ' Navigate to localhost:8080 to test that this worked. Try to save a Todo without any text in it, and then try and save a Todo with over 140 characters. If these didn\'t save and you see errors in your console that have to do with validation, you were successful.', '  Big Hint: Sequelize documentation on validations with examples can be found here: <http://docs.sequelizejs.com/en/latest/docs/models-definition/#validations>');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`) VALUES ('11', 'Post-Model', 'exercise eleven', '15:00', '   Open the folder slacked out to you, run `npm install`', '   Create a new MySQL database and name it `blogger`. Don\'t create any tables.', '  Open the `config` folder and update the `config.json` file\'s `development` object to match your own local MySQL database.', ' Go to the `models` folder and open the `post.js` file.', '  Create a Sequelize `Post` model here. The model should have a title property of type DataTypes.STRING, a body property of DataTypes.TEXT, and a category property of DataTypes.STRING. \n  (<http://docs.sequelizejs.com/manual/tutorial/models-definition.html#data-types>)', ' To check if this worked, run `node server.js` in your terminal. Then open MySQL Workbench to check if a Posts table has been created.');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`) VALUES ('12', 'Blog CRUD', 'exercise twelve', '15:00', '   Open the folder sent out to you, run `npm install`', ' Open the `config` folder and update the `config.json` file\'s `development` object to match your own local MySQL database.', ' Navigate to the `api-routes.js` file inside of the `routes` folder.', '   Fill in each route with the code described in the comments to add each CRUD action.\n');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`, `Step_7`, `Step_8`) VALUES ('13', 'Post-Author-Association', 'exercise thirteen', '10:00', ' Open the folder sent out to you.', '   Run `npm install`', '   Open the `config` folder and update the `config.json` file\'s `development` object to match your own local MySQL database.', '   Navigate to the `post.js` file.', '   You will need to set an `associate` property to the `Post` model after it\'s defined. There\'s an example of this type of association being done here: ', '<https://github.com/sequelize/express-example/blob/master/models/task.js>', ' This may take a few tries to implement correctly in your own Post model (There\'s a lot of curly braces there!). You can verify your code works by starting your node server and then checking MySQL Workbench. If the Posts table now has a foreign key of AuthorId, you were successful.', 'Bonus: If you complete the exercise before time\'s up, navigate to the author.js file and add a hasMany association from the Author model to the Post Model.');
INSERT INTO `TensionDB`.`exerciseOne` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`, `Step_7`, `Step_8`) VALUES ('14', 'Post-Author-Joins', 'exercise fourteen', '15:00', ' Open the folder sent out to you', ' Run `npm install`', ' Open the `config` folder and update the `config.json` file\'s `development` object to match your own local MySQL database.', '  Navigate to the `post-api-routes.js` file.', '  Add the \"include\" option to the queries specified in the comments. This is a feature called \"eager loading\". We want to \"include\" the Author model.', '   Navigate to the `author-api-routes.js` file and add the \"include\" option to the queries specified in the comments. Here we want to \"include\" the Post model.', '   If successful the application should now be fully functional. After you create a few Authors with a few posts, try navigating to either `localhost:8080/api/posts` or `localhost:8080/api/authors` to make sure the JSON returned for both routes includes all of the data.', '  Hint: The \"include\" key goes on the same options object as the \"where\" attribute we\'ve been using. Examples can be found at the link supplied.');

--module 14
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`) VALUES ('1', 'Express Calculator', 'exercise 1', '15:00', ' You will create an Express calculator application with one get route that is able to take in three parameters: an operation and two numbers.', ' There are four operation values which a user may use: addition, subtraction, multiplication, and division.', ' When the route is hit, your browser should display the result of the math operation.', ' For example, when the user goes to the url <http://localhost:3000/add/10/1>, the page should display 11.');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `Step_1`) VALUES ('2', 'Magic Schools', 'exercise 2', 'No ReadMe');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`, `Step_7`) VALUES ('3', 'Seinfeld app', 'exercise 3', '20:00', '   Create a seinfeld_db database with an actors table.', '     The actors table will have a column for id (PRIMARY KEY AUTO_INCREMENT int), name (varchar), coolness_points (int), and attitude (varchar).', '   Add in four actors with different names, coolness_points, and attitudes.', '   Create a Node Application with Express and MySQL with three Express routes.', '     Create a `/cast` route that will display all the actors and their data ordered by their id\'s.', '     Create a `/coolness-chart` route that will display all the actors and their data ordered by their coolness points.', '     Create a `/attitude-chart/:att` route that will display all the actors for a specific type of attitude.');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `Step_1`) VALUES ('4', 'Handlebars Lunch', 'exercise 4', 'No Readme');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`) VALUES ('5', 'Ben and Jerrys', 'exercise 5', '15:00', '   In this activity, you are going to be creating your own Ben and Jerry\'s App where users can see all of the different flavors Ben and Jerry\'s have to offer while also getting specific information on a flavor by searching for it within the URL.', '   Do not use MySQL for this assignment! Use the `icecreams` variable above as your data. Add the variable to your `server.js` file.', '   Using handlebars and express, create a route called `/icecream/:name`. When the route is hit, it will display the name, price and awesomeness for that specific ice cream.', '   Create an `/icecreams` route. It will loop over all the ice creams and display them all to the user.', ' var icecreams = [\n      {name: \'vanilla\', price: 10, awesomeness: 3},\n      {name: \'chocolate\', price: 4, awesomeness: 8},\n      {name: \'banana\', price: 1, awesomeness: 1},\n      {name: \'greentea\', price: 5, awesomeness: 7},\n      {name: \'jawbreakers\', price: 6, awesomeness: 2},\n    ];');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`) VALUES ('6', 'Handlebar Animals', 'exercise 6', '5:00', '   You will edit the `server.js` file, the `dog.handlebars` file, and the `index.handlebars` file in an attempt to recreate the application that we demonstrated just a couple of minutes ago. Instructions on what to do are contained within each file you will have to edit.', '   You won\'t be using MySQL for this exercise but will instead be using the animals array in the `server.js` file.');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `Step_1`) VALUES ('7', 'Tasksaver', 'exercise 7', 'No Readme');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`, `Step_7`, `Step_8`, `Step_9`) VALUES ('8', 'wishes', 'exercise 8', '30:00', '   Create an app with Express, MySQL and Handlebars.', '     HINT: this app will be very similar to the app your instructor just demonstrated and slacked out. Please feel free to leverage that code when creating this code.', '   Create a `schema.sql` file and create the following inside of that file:', '    1. Make a database called \"wishes_db\"', '    2. Inside of that database, make a table called \"wishes\" which will have a wish column and an id column. The id will be automatically incremented while also being the primary key.', '    3. Run your `schema.sql` file within MySQL Workbench before moving onto the next steps.', '   In your `server.js` file, you will have to create two routes: a get route for `\'/\'` and a post route for `\'/\'`.', '     Render all of the wishes from the wishes table when the `\'/\'` get route is hit. Additionally show the form that the user can use to create a new wish. The form will POST to the `\'/\'` route.', '     The `\'/\'` post route will insert the wish from the form into the wishes table and will redirect the user back to the `\'/\'` get route.');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `Step_1`) VALUES ('9', 'dayplanner', 'exercise 9', 'No Readme');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`, `Step_7`, `Step_8`, `Step_9`) VALUES ('10', 'watchlist', 'exercise 10', '20:00', '    1. Make a database called moviePlannerDB', '    2. Inside of that database make a movies table which will contain a movie column and an id column. The id will be automatically incremented while also being the primary key.', '    3. Run your `schema.sql` file within MySQL Workbench before moving onto the next steps.', '   In your server.js file, you will create four routes: `get`, `post`, `put`, and `delete`.', '     Render the main `index.handlebars` when the `\'/\'` get route is hit with all of the movies from the movies table.', '     Your application should have a set of routes on `\'/api/movies\'` for create, update, and delete operations on the movies table.', '     Show a delete button next to each movie. When one of the delete buttons is clicked, the code should send a DELETE request to  delete the associated movie from your database.', '     Additionally, show the form that the user can use to add a movie to be watched.  When the submit button is clicked, the code will post to the `\'/movies\'` route, which will insert the movie from the form into the movies table and return the ID of the new movie.', '     Have another form that will update a movie in the movies table. The form will include two inputs: an id input and a movie title input. Remember to leverage a PUT method.');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`) VALUES ('11', 'quotesapp', 'exercise 11', '15:00', '   Using Express, MySQL, Handlebars, and the starter code as a jumping-off point, you will be creating a simple web application which allows users to create, read, update, and delete popular quotes.', '   Your application will have two pages:', '     One will show all of the quotes within a database and will allow users to create a new quote or delete an existing one. A button next to each, labeled \"Update This Quote,\" will take users to the other page which shows the quote selected and will allow them to update it with new information.', '   Make sure to run the code contained within the `schema.sql` and `seeds.sql` files beforehand so that you have a database with which to work.');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `Step_1`) VALUES ('12', 'ORM example', 'exercise 12', 'No Readme');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`) VALUES ('13', 'Party_DB', 'exercise 13', '15:00', ' Create a Node MySQL application with an ORM that executes once the server is launched.', ' You will not need Express or Handlebars for this assignment. Use `console.log` to print the data collected to the console.', ' Create a MySQL database with the tables and data which were slacked out to you.', ' Create a Node app and connect it to MySQL with a `config` folder and with a `connection.js` file inside of that folder.', ' Create an `orm.js` file, and make an ORM that will do the following:', 'Console log all the party names.\n   Console log all the client names.\n   Console log all the parties that have a party-type of grown-up.\n   Console log all the clients and their parties.');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `Step_1`) VALUES ('14', 'The Asynch Problem', 'exercise 14', 'No Readme');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`) VALUES ('15', 'The Asynch Solution', 'exercise 15', '15:00', ' Work in pairs to see if you can come up with the reason why our code in `18-TheAsynchProblem` is console.logging \"undefined\" despite no errors being recorded.', ' See if you can come up with a possible solution to this problem.', '   You are free to search the web for potential causes/solutions to this issue, as it is a problem that many new coders have faced and that they will continue to face for years and years to come.', '   Use the code contained within `18-TheAsynchProblem` to run, test, and mess with on your own.');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `Step_1`) VALUES ('16', 'Callback review', 'exercise 16', 'No Readme');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `Step_1`) VALUES ('17', 'MVC example', 'exercise 17', 'No Readme');
INSERT INTO `TensionDB`.`exerciseTwo` (`id`, `Title`, `description`, `countDown`, `Step_1`, `Step_2`, `Step_3`, `Step_4`, `Step_5`, `Step_6`) VALUES ('18', 'Cats App', 'exercise 18', '30:00', '   Add a delete button into the `index.handlebars` file next to each cat.', '   Add on to the following:', '   The `cats.js` file to add a jQuery event handler for the delete button.', '   The ORM to include a delete key and function', '   The cat model to include a delete key and function that uses the ORM', '   The `catsController.js` file to have a `/api/cats/:id` delete route, to call the delete key of the cat model, and to pass in arguments as necessary');
